/*
 Count and Say:

     The count-and-say sequence is a series of numbers where each number is the result of reading the previous number aloud.
     Example: n = 4 should return "1211" (read as "one 1, one 2, two 1s").
 
 https://www.geeksforgeeks.org/look-and-say-sequence/
 The look-and-say sequence is the sequence of the below integers:
 1, 11, 21, 1211, 111221, 312211, 13112221, 1113213211, …

 How is the above sequence generated?
 n’th term is generated by reading (n-1)’th term.

 The first term is "1"
 Second term is "11", generated by reading first term as "One 1"
 (There is one 1 in previous term)
 Third term is "21", generated by reading second term as "Two 1"
 Fourth term is "1211", generated by reading third term as "One 2 One 1"
 and so on
 */

func countAndSay(_ n: Int) -> String {
    guard n > 0 else { return "" }

    var result = "1"

    for _ in 1..<n {
        var tempResult = ""
        var count = 1

        for i in 1..<result.count {
            if result[result.index(result.startIndex, offsetBy: i)] == result[result.index(result.startIndex, offsetBy: i - 1)] {
                count += 1
            } else {
                tempResult += "\(count)\(result[result.index(result.startIndex, offsetBy: i - 1)])"
                count = 1
            }
        }

        tempResult += "\(count)\(result[result.index(result.startIndex, offsetBy: result.count - 1)])"
        result = tempResult
    }

    return result
}

// Example usage:
let countAndSayResult = countAndSay(8)
print(countAndSayResult)
